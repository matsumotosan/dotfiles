return {
	"nvim-treesitter/nvim-treesitter",
	build = ":TSUpdate",
	event = {
		"BufReadPost",
		"BufNewFile",
	},
	dependencies = {
		"nvim-treesitter/nvim-treesitter-textobjects",
		"nvim-treesitter/nvim-treesitter-context",
	},
	config = function()
		require("nvim-treesitter.configs").setup({
			ensure_installed = {
				"asm",
				"bash",
				"c",
				"cmake",
				"cpp",
				"csv",
				"diff",
				"dockerfile",
				"fish",
				"git_config",
				"git_rebase",
				"gitattributes",
				"gitcommit",
				"gitignore",
				"hcl",
				"html",
				"json",
				"kdl",
				"latex",
				"lua",
				"luadoc",
				"make",
				"markdown",
				"markdown_inline",
				"python",
				"query",
				"regex",
				"rust",
				"ssh_config",
				"toml",
				"tsv",
				"typst",
				"vim",
				"vimdoc",
				"xml",
				"yaml",
			},
			auto_install = true,
			highlight = {
				enable = true,
				additional_vim_regex_highlighting = { "markdown" },
			},
			indent = {
				enable = true,
			},
			textobjects = {
				select = {
					enable = true,
					lookahead = true,
					keymaps = {
						["ie"] = "@assignment.inner",
						["ae"] = "@assignment.outer",
						["le"] = "@assignment.lhs",
						["re"] = "@assignment.rhs",
						["aa"] = "@parameter.outer",
						["ia"] = "@parameter.inner",
						["ai"] = "@conditional.outer",
						["ii"] = "@conditional.inner",
						["af"] = "@function.outer",
						["if"] = "@function.inner",
						["ac"] = "@class.outer",
						["ic"] = "@class.inner",
						["al"] = "@loop.outer",
						["il"] = "@loop.inner",
						["at"] = "@comment.outer",
						["ad"] = "@documentation.outer",
					},
				},
				swap = {
					enable = true,
					swap_next = {
						["<leader>pn"] = "@parameter.inner",
					},
					swap_previous = {
						["<leader>pa"] = "@parameter.inner",
					},
				},
			},
		})
	end,
}
